From fcfbef7f66dc31978bcb228dd8a042f9aa190ff7 Mon Sep 17 00:00:00 2001
From: Alexei Voitylov <avoitylov@openjdk.org>
Date: Mon, 3 Jun 2024 21:16:00 +0000
Subject: [PATCH] 8319859: Better symbol storage

Reviewed-by: yan, mbalao
Backport-of: f7857e9106841f402ade56bad0338fc53159fb9a

Cherry-pick upstream commit-id: fcfbef7f66dc31978bcb228dd8a042f9aa190ff7

Orabug: 36904359

Signed-off-by: Sourav Sharma <sourav.ss.sharma@oracle.com>
Reviewed-by: Laurence Rochfort <laurence.rochfort@oracle.com>

---
 src/hotspot/share/classfile/symbolTable.cpp | 15 ++++++++++++++-
 src/hotspot/share/oops/symbol.cpp           |  3 ++-
 src/hotspot/share/oops/symbol.hpp           |  3 ++-
 3 files changed, 18 insertions(+), 3 deletions(-)

diff --git a/src/hotspot/share/classfile/symbolTable.cpp b/src/hotspot/share/classfile/symbolTable.cpp
index 6aec989ffd4..06f4c0f7592 100644
--- a/src/hotspot/share/classfile/symbolTable.cpp
+++ b/src/hotspot/share/classfile/symbolTable.cpp
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2024, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -301,7 +301,18 @@ unsigned int SymbolTable::hash_shared_symbol(const char* s, int len) {
 // entries in the symbol table during normal execution (only during
 // safepoints).
 
+// Symbols should represent entities from the constant pool that are
+// limited to 64K in length, but usage errors creep in allowing Symbols
+// to be used for arbitrary strings. For debug builds we will assert if
+// a string is too long, whereas product builds will truncate it.
 Symbol* SymbolTable::lookup(const char* name, int len, TRAPS) {
+  assert(len <= Symbol::max_length(),
+         "String length %d exceeds the maximum Symbol length of %d", len, Symbol::max_length());
+  if (len > Symbol::max_length()) {
+    warning("A string \"%.80s ... %.80s\" exceeds the maximum Symbol "
+            "length of %d and has been truncated", name, (name + len - 80), Symbol::max_length());
+    len = Symbol::max_length();
+  }
   unsigned int hashValue = hash_symbol(name, len);
   int index = the_table()->hash_to_index(hashValue);
 
@@ -432,6 +443,7 @@ void SymbolTable::add(ClassLoaderData* loader_data, const constantPoolHandle& cp
     for (int i=0; i<names_count; i++) {
       int index = table->hash_to_index(hashValues[i]);
       bool c_heap = !loader_data->is_the_null_class_loader_data();
+      assert(lengths[i] <= Symbol::max_length(), "must be - these come from the constant pool");
       Symbol* sym = table->basic_add(index, (u1*)names[i], lengths[i], hashValues[i], c_heap, CHECK);
       cp->symbol_at_put(cp_indices[i], sym);
     }
@@ -456,6 +468,7 @@ Symbol* SymbolTable::basic_add(int index_arg, u1 *name, int len,
                                unsigned int hashValue_arg, bool c_heap, TRAPS) {
   assert(!Universe::heap()->is_in_reserved(name),
          "proposed name of symbol must be stable");
+  assert(len <= Symbol::max_length(), "caller should have ensured this");
 
   // Don't allow symbols to be created which cannot fit in a Symbol*.
   if (len > Symbol::max_length()) {
diff --git a/src/hotspot/share/oops/symbol.cpp b/src/hotspot/share/oops/symbol.cpp
index aef6d37a612..45ae3d22968 100644
--- a/src/hotspot/share/oops/symbol.cpp
+++ b/src/hotspot/share/oops/symbol.cpp
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2024, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -37,6 +37,7 @@
 #include "runtime/signature.hpp"
 
 Symbol::Symbol(const u1* name, int length, int refcount) {
+  assert(length <= max_length(), "SymbolTable should have caught this!");
   _refcount = refcount;
   _length = length;
   _identity_hash = (short)os::random();
diff --git a/src/hotspot/share/oops/symbol.hpp b/src/hotspot/share/oops/symbol.hpp
index 78d413736df..9c88b962487 100644
--- a/src/hotspot/share/oops/symbol.hpp
+++ b/src/hotspot/share/oops/symbol.hpp
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2024, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -128,6 +128,7 @@ class Symbol : public MetaspaceObj {
     return (int)heap_word_size(byte_size(length));
   }
 
+  // Constructor is private for use only by SymbolTable.
   Symbol(const u1* name, int length, int refcount);
   void* operator new(size_t size, int len, TRAPS) throw();
   void* operator new(size_t size, int len, Arena* arena, TRAPS) throw();
