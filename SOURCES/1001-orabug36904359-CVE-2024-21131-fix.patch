From 6fb5b8a3d26acfcfc0c114b13feab5f9a28718e7 Mon Sep 17 00:00:00 2001
From: Alexei Voitylov <avoitylov@openjdk.org>
Date: Wed, 5 Jun 2024 19:43:15 +0000
Subject: [PATCH] 8314794: Improve UTF8 String supports

Co-authored-by: Ekaterina Vergizova <evergizova@openjdk.org>
Reviewed-by: mbalao
Backport-of: ab2532d858de8d855529b6f2491f94c499f94009

Orabug: 36904359

Cherry-pick upstream commit-id: 6fb5b8a3d26acfcfc0c114b13feab5f9a28718e7

Signed-off-by: Sourav Sharma <sourav.ss.sharma@oracle.com>
Reviewed-by: Laurence Rochfort <laurence.rochfort@oracle.com>

---
 src/hotspot/share/utilities/exceptions.cpp | 24 +++++++++++++---------
 src/hotspot/share/utilities/utf8.cpp       | 10 ++++++---
 2 files changed, 21 insertions(+), 13 deletions(-)

diff --git a/src/hotspot/share/utilities/exceptions.cpp b/src/hotspot/share/utilities/exceptions.cpp
index c8f82a7e24f..98be313be44 100644
--- a/src/hotspot/share/utilities/exceptions.cpp
+++ b/src/hotspot/share/utilities/exceptions.cpp
@@ -41,6 +41,9 @@
 #include "utilities/events.hpp"
 #include "utilities/exceptions.hpp"
 
+// Limit exception message components to 64K (the same max as Symbols)
+#define MAX_LEN 65535
+
 // Implementation of ThreadShadow
 void check_ThreadShadow() {
   const ByteSize offset1 = byte_offset_of(ThreadShadow, _pending_exception);
@@ -135,10 +138,11 @@ void Exceptions::_throw(Thread* thread, const char* file, int line, Handle h_exc
   assert(h_exception() != NULL, "exception should not be NULL");
 
   // tracing (do this up front - so it works during boot strapping)
-  log_info(exceptions)("Exception <%s%s%s> (" INTPTR_FORMAT ") \n"
+  log_info(exceptions)("Exception <%.*s%s%.*s> (" INTPTR_FORMAT ") \n"
                        "thrown [%s, line %d]\nfor thread " INTPTR_FORMAT,
-                       h_exception->print_value_string(),
-                       message ? ": " : "", message ? message : "",
+                       MAX_LEN, h_exception->print_value_string(),
+                       message ? ": " : "",
+                       MAX_LEN, message ? message : "",
                        p2i(h_exception()), file, line, p2i(thread));
   // for AbortVMOnException flag
   Exceptions::debug_check_abort(h_exception, message);
@@ -531,13 +535,13 @@ void Exceptions::log_exception(Handle exception, const char* message) {
   ResourceMark rm;
   const char* detail_message = java_lang_Throwable::message_as_utf8(exception());
   if (detail_message != NULL) {
-    log_info(exceptions)("Exception <%s: %s>\n thrown in %s",
-                         exception->print_value_string(),
-                         detail_message,
-                         message);
+    log_info(exceptions)("Exception <%.*s: %.*s>\n thrown in %.*s",
+                         MAX_LEN, exception->print_value_string(),
+                         MAX_LEN, detail_message,
+                         MAX_LEN, message);
   } else {
-    log_info(exceptions)("Exception <%s>\n thrown in %s",
-                         exception->print_value_string(),
-                         message);
+    log_info(exceptions)("Exception <%.*s>\n thrown in %.*s",
+                         MAX_LEN, exception->print_value_string(),
+                         MAX_LEN, message);
   }
 }
diff --git a/src/hotspot/share/utilities/utf8.cpp b/src/hotspot/share/utilities/utf8.cpp
index a67fd7134c4..1b5a0efc66b 100644
--- a/src/hotspot/share/utilities/utf8.cpp
+++ b/src/hotspot/share/utilities/utf8.cpp
@@ -435,12 +435,16 @@ int UNICODE::utf8_size(jbyte c) {
 
 template<typename T>
 int UNICODE::utf8_length(T* base, int length) {
-  int result = 0;
+  size_t result = 0;
   for (int index = 0; index < length; index++) {
     T c = base[index];
-    result += utf8_size(c);
+    int sz = utf8_size(c);
+    if (result + sz > INT_MAX-1) {
+      break;
+    }
+    result += sz;
   }
-  return result;
+  return checked_cast<int>(result);
 }
 
 template<typename T>
